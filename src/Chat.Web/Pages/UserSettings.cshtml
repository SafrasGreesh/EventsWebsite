@page
@model UserSettingsModel
@{
    ViewData["Title"] = "UserSettings";
}
<style>
	img.dragover {
    transition: all 0.3s ease-in-out;
    transform: scale(1.10);
	}

	.drop-area p {
		margin-bottom: 0;
		font-size: 18px;
		color: #555;
	}
</style>
<body>
	<div class="container mt-5">
		<div class="row justify-content-center">
			<div class="col-lg-6 col-md-8 col-sm-10">
				<div class="card">
					<div class="card-header">
						<h3 class="text-center">Профиль</h3>
					</div>			
					<div class="card-body">
						<div class="mb-3">
							<label for="username" class="form-label">Имя пользователя</label>
							<input type="text" class="form-control" id="username" name="username" value="" readonly>
						</div>
						<div class="mb-3">
							<label for="email" class="form-label">E-mail</label>
							<input type="email" class="form-control" id="email" name="email" value="" readonly>
						</div>
						<div class="mb-3">
							<label for="gender" class="form-label">Пол</label>
							<input type="text" class="form-control" id="gender" name="gender" value="" readonly>
						</div>
						<div class="mb-3">
							<city for="city" class="form-city">Город</city>
							<input type="text" class="form-control" id="city" name="city" value="" readonly>
						</div>
						<div class="mb-3">
							@*<label for="birthdate" class="form-label">Дата рождения</label>
							<input type="text" class="form-control" id="birthdate" name="birthdate" value="" readonly>*@
							<p class="card-text">Дата рождения: <span id="birthdate" value=""></span></p>
						</div>
						<button type="button" class="btn btn-primary w-100">Изменить информацию</button>
						<button type="button" class="btn btn-success w-100 d-none" id="saveBtn">Сохранить</button>
					</div>
				</div>
			</div>
			<div class="col-lg-6 col-md-8 col-sm-10">
				<div class="card">
					<div class="card-header">
						<div class="mb-3 text-center">
							<img src="https://via.placeholder.com/150" class="rounded-circle mb-3" alt="Фотография пользователя" width="150" height="150">
							<div class="input-group">
								<input type="file" class="form-control" id="photo" name="photo" accept="image/*" style="display: none;">
								<button type="button" class="btn btn-secondary" onclick="document.getElementById('photo').click()">Изменить фото</button>
								<div class="drop-area">
									<p>Или перетащите нужное изображение</p>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="mb-5">
					<label for="description" class="form-label">Описание</label>
					<textarea class="form-control" id="description" name="description" rows="3" readonly></textarea>
					<div class="card-body">
						<button type="button" class="btn btn-primary w-100" id="editBtnD">Изменить описание</button>
						<button type="button" class="btn btn-success w-100 d-none" id="saveBtnD">Сохранить</button>
					</div>
				</div>
			</div>
		</div>
	</div>

	<script>
		fetch('/users/id')
			.then(response => response.json())
			.then(user => {
				// Заполнить поля на странице данными пользователя
				document.getElementById("username").value = user.name;
				document.getElementById("email").value = user.mail;
				document.getElementById("gender").value = user.gender;
				document.getElementById("city").value = user.city;
				document.getElementById("birthdate").textContent = user.birthDate;
				document.getElementById("description").value = user.description;
			})
			.catch(error => console.error(error));


		// Находим кнопку "Изменить профиль"
	  var editBtn = document.querySelector('button.btn-primary');

	  // Находим все поля ввода
	  var inputFields = document.querySelectorAll('input.form-control', 'textarea.form-control');

	  // При клике на кнопку "Изменить профиль" изменяем состояние полей ввода
	  editBtn.addEventListener('click', function() {
		for (var i = 0; i < inputFields.length; i++) {
		  inputFields[i].readOnly = false;
		}
			document.getElementById("birthdate").readOnly = true;
	  });

		var saveBtn = document.querySelector('button#saveBtn');

		editBtn.addEventListener('click', function () {
			for (var i = 0; i < inputFields.length; i++) {
				inputFields[i].readOnly = false;
			}
			editBtn.classList.add('d-none');
			saveBtn.classList.remove('d-none');
		});

		saveBtn.addEventListener('click', function () {
			// отправить измененные данные на сервер или сохранить их локально
			// ...

			var name = document.getElementById("username").value;
			var mail = document.getElementById("email").value;
			var gender = document.getElementById("gender").value;
			var city = document.getElementById("city").value;
			//var birthDate = document.getElementById("birthdate").value;
			//var description = document.getElementById("description").value;

			// Создать объект с данными пользователя
			var userData = {
				password: "",
				photo: "",
				name: name,
				mail: mail,
				gender: gender,
				city: city,
				birthDate: "2023-05-13T21:43:21.558Z",
				description: ""
			};

			// Отправить данные на сервер в POST-запросе
			$.post({
				url: '/users/update', // Здесь указывается URL-путь для обработки регистрации на сервере
				contentType: 'application/json',
				data: JSON.stringify(userData),
				success: function (response) {
					// Обработка успешного ответа сервера после регистрации
					console.log(response);
					alert('Обновление данных прошло успешно');
					//window.location.href = "home";
					// Дополнительные действия, например, перенаправление на другую страницу
				},
				error: function (xhr, status, error) {
					// Обработка ошибки при регистрации
					console.log(xhr.responseText);
					alert('Ошибка обновления');
				}
			});


			for (var i = 0; i < inputFields.length; i++) {
				inputFields[i].readOnly = true;
			}
			saveBtn.classList.add('d-none');
			editBtn.classList.remove('d-none');
		});

		saveBtn.addEventListener('click', function () {
			var hasChanges = false;
			for (var i = 0; i < inputFields.length; i++) {
				if (inputFields[i].value !== inputFields[i].defaultValue) {
					hasChanges = true;
					break;
				}
			}
			if (hasChanges) {
				// отправить измененные данные на сервер или сохранить их локально
				// ...

				for (var i = 0; i < inputFields.length; i++) {
					inputFields[i].readOnly = true;
					inputFields[i].defaultValue = inputFields[i].value;
				}
				saveBtn.classList.add('d-none');
				editBtn.classList.remove('d-none');
			}
		});

		// Находим поле ввода типа "файл"
		var photoInput = document.getElementById('photo');

		// Находим тег "img"
		var profileImg = document.querySelector('img');

		// При изменении значения поля ввода типа "файл"
		photoInput.addEventListener('change', function () {
			// Получаем файл из поля ввода
			var file = photoInput.files[0];

			loadFile(file);
			// Создаем объект FileReader
			var reader = new FileReader();

			// При загрузке файла в объект FileReader
			reader.addEventListener("load", function () {
				// Задаем новое значение атрибута "src" тега "img"
				profileImg.src = reader.result;
			}, false);

			// Читаем файл как URL-адрес
			if (file) {
				reader.readAsDataURL(file);
			}
		});

		// При перетаскивании файла на изображение
		profileImg.addEventListener('dragover', function(e) {
			e.preventDefault();
			this.classList.add('dragover');
		});

		// При сбросе файла на изображение
		profileImg.addEventListener('drop', function(e) {
			e.preventDefault();
			this.classList.remove('dragover');
			var file = e.dataTransfer.files[0];
			loadFile(file);
		});

		// При уходе файла с изображения
		profileImg.addEventListener('dragleave', function(e) {
			e.preventDefault();
			this.classList.remove('dragover');
		});

		// Функция для загрузки файла
		function loadFile(file) {
			var reader = new FileReader();
			reader.addEventListener("load", function () {
				profileImg.src = reader.result;
			}, false);
			if (file) {
				reader.readAsDataURL(file);
			}
		}


		//var editBtnD = document.querySelector('button.btn-primary-d');

		// Находим все поля ввода
		var inputFieldsD = document.querySelectorAll('textarea.form-control');

		// При клике на кнопку "Изменить профиль" изменяем состояние полей ввода
		editBtnD.addEventListener('click', function () {
			for (var i = 0; i < inputFieldsD.length; i++) {
				inputFieldsD[i].readOnly = false;
			}
		});

		var saveBtnD = document.querySelector('button#saveBtnD');

		editBtnD.addEventListener('click', function () {
			for (var i = 0; i < inputFieldsD.length; i++) {
				inputFieldsD[i].readOnly = false;
			}
			editBtnD.classList.add('d-none');
			saveBtnD.classList.remove('d-none');
		});

		saveBtnD.addEventListener('click', function () {
			// отправить измененные данные на сервер или сохранить их локально
			// ...
			var description = document.getElementById("description").value;

			// Создать объект с данными пользователя
			var userData = {
				password: "",
				photo: "",
				name: "",
				mail: "",
				gender: "",
				city: "",
				birthDate: "2023-05-13T21:43:21.558Z",
				description: description
			};

			// Отправить данные на сервер в POST-запросе
			$.post({
				url: '/users/update', // Здесь указывается URL-путь для обработки регистрации на сервере
				contentType: 'application/json',
				data: JSON.stringify(userData),
				success: function (response) {
					// Обработка успешного ответа сервера после регистрации
					console.log(response);
					alert('Обновление данных прошло успешно');
					//window.location.href = "home";
					// Дополнительные действия, например, перенаправление на другую страницу
				},
				error: function (xhr, status, error) {
					// Обработка ошибки при регистрации
					console.log(xhr.responseText);
					alert('Ошибка обновления');
				}
			});

			for (var i = 0; i < inputFieldsD.length; i++) {
				inputFieldsD[i].readOnly = true;
			}
			saveBtnD.classList.add('d-none');
			editBtnD.classList.remove('d-none');
		});

		saveBtnD.addEventListener('click', function () {
			var hasChanges = false;
			for (var i = 0; i < inputFieldsD.length; i++) {
				if (inputFieldsD[i].value !== inputFieldsD[i].defaultValue) {
					hasChanges = true;
					break;
				}
			}
			if (hasChanges) {
				// отправить измененные данные на сервер или сохранить их локально
				// ...

				for (var i = 0; i < inputFieldsD.length; i++) {
					inputFieldsD[i].readOnly = true;
					inputFieldsD[i].defaultValue = inputFieldsD[i].value;
				}
				saveBtnD.classList.add('d-none');
				editBtnD.classList.remove('d-none');
			}
		});
	</script>
</body>